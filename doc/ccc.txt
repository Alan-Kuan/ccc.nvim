*ccc.txt*					Create Color Code in neovim.

==============================================================================
Contents                                                          *ccc-contents*


Introduction						|ccc-introduction|
Setup							|ccc-setup|
Option							|ccc-option|
Interface						|ccc-interface|
Action							|ccc-action|



==============================================================================
Introduction                                                  *ccc-introduction*


Use the sliders, easy, to create any color you want!

Features:
- You can use RGB, HSL, and other color system sliders for color adjustment.
- Dynamic highlighting of sliders.
- Record and restore previously used colors.
- Selectable output formats.



==============================================================================
Setup                                                                *ccc-setup*


If you do not want to change the default setting, there is no need to call
setup (Empty setup is done automatically by plugin/ccc.lua).
See |ccc-option| for the options that can be specified.


>
	local ccc = require("ccc")
	local mapping = ccc.mapping
	
	ccc.setup({
		-- Your favorite settings
	})
<



==============================================================================
Option                                                             *ccc-option*


                                                      *ccc-option-default-color*
default_color ~
string
Default: "#000000"
	The default color used when a color cannot be picked. See also
	|ccc-option-preserve|.


                                                           *ccc-option-bar-char*
bar_char ~
string
Default: "■"
	The character used for the sliders.


                                                         *ccc-option-point-char*
point_char ~
string
Default: "◇"
	The character used for the cursor point on the sliders.


                                                            *ccc-option-bar-len*
bar_len ~
integer
Default: 30
	The length of the slider (not byte length). This value number of
	bar_chars form a slider.


                                                           *ccc-option-win-opts*
win_opts ~
table
Default: {
	relative = "cursor",
	row = 1,
	col = 1,
	style = "minimal",
	border = "rounded",
}
	The options passed to the |nvim_open_win|. 'width' and 'height' cannot
	be specified.


                                                           *ccc-option-preserve*
preserve ~
boolean
Default: false
	Whether to preserve the colors when the UI is closed. If this is true,
	you can start where you left off last time.


                                                       *ccc-option-save-on-quit*
save_on_quit ~
boolean
Default: false
	Whether to add colors to prev_colors when quit (|ccc-action-quit|).


                                                             *ccc-option-inputs*
inputs ~
table
Default: {
	ccc.inputs.rgb,
	ccc.inputs.hsl,
	ccc.inputs.cmyk,
}
	List of color system to be activated. |ccc-action-toggle-input-mode|
	toggles in this order. The first one is the default used at the first
	startup. Once activated, it will keep the previous input mode.
	The presets currently available are as follows:
		- RGB:   ccc.inputs.rgb
		- HSL:   ccc.inputs.hsl
		- CMYK:  ccc.inputs.cmyk
		- Lab:   ccc.inputs.lab
		- HSLuv: ccc.inputs.hsluv
		- XYZ:   ccc.inputs.xyz
		- HSV:   ccc.inputs.hsv


                                                            *ccc-option-outputs*
outputs ~
table
Default: {
	ccc.outputs.hex,
	ccc.outputs.hex_short,
	ccc.outputs.css_rgb,
	ccc.outputs.css_hsl,
}
	List of output format to be activated. |ccc-action-toggle-output-mode|
	toggles in this order. The first one is the default used at the first
	startup. Once activated, it will keep the previous output mode.
	The presets currently available are as follows:
		- HEX:    ccc.outputs.hex
		          ccc.outputs.hex_short
		- CssRGB: ccc.outputs.css_rgb
		- CssHSL: ccc.outputs.css_hsl


                                                            *ccc-option-pickers*
pickers ~
table
Default: {
	ccc.pickers.hex,
	ccc.pickers.hex_short,
	ccc.pickers.css_rgb,
	ccc.pickers.css_hsl,
}
	List of formats that can be detected by |:CccPick| to be activated.
	The presets currently available are as follows:
		- HEX:    ccc.pickers.hex
		          ccc.pickers.hex_short
		- CssRGB: ccc.pickers.css_rgb
		- CssHSL: ccc.pickers.css_hsl


                                                           *ccc-option-mappings*
mappings ~
table
Default: See |ccc-action|
	The mappings are set in the UI of ccc. The table where lhs is key and
	rhs is value.



==============================================================================
Interface                                                        *ccc-interface*


------------------------------------------------------------------------------
Command                                                            *ccc-command*


                                                                      *:CccPick*
:CccPick ~
	Detects and replaces the color under the cursor. Detectable formats
	are defined in |ccc-option-pickers|. If nothing is detected, it is
	inserted at a new cursor position.


------------------------------------------------------------------------------
Key mapping                                                    *ccc-key-mapping*


                                                            *<Plug>(ccc-insert)*
<Plug>(ccc-insert) ~
	Defined in insert mode. Insert the color without detection.



==============================================================================
Action                                                              *ccc-action*


All functions are implemented as lua functions.
To customize, use |ccc-option-mappings|.

>
	local ccc = require("ccc")
	local mapping = ccc.mapping
<


                                                           *ccc-action-complete*
complete ~
mapping.complete()
Default mapping: <CR>
	Close the UI and perform a replace or insert.
	If open the previous colors pallet, select the color under the cursor.


                                                               *ccc-action-quit*
quit ~
mapping.quit()
Default mapping: q
	Cancel and close the UI without replace or insert. Don't use |:q|.


                                                  *ccc-action-toggle-input-mode*
toggle_input_mode ~
mapping.toggle_input_mode()
Default mapping: i
	Toggle input mode. See |ccc-option-inputs|.


                                                 *ccc-action-toggle-output-mode*
toggle_output_mode ~
mapping.toggle_output_mode()
Default mapping: o
	Toggle output mode. See |ccc-option-outputs|.


                                                 *ccc-action-toggle-prev-colors*
toggle_prev_colors ~
mapping.toggle_prev_colors()
Default mapping: g
	Toggle show and hide the previous colors pallet.
	Use the following to move colors.
		- |ccc-action-goto-next|
		- |ccc-action-goto-prev|
		- |ccc-action-goto-tail|
		- |ccc-action-goto-head|


                                                   *ccc-action-show-prev-colors*
toggle_prev_colors ~
mapping.show_prev_colors()
Default mapping is nothing.
	Show the previous colors pallet.


                                                   *ccc-action-hide-prev-colors*
toggle_prev_colors ~
mapping.hide_prev_colors()
Default mapping is nothing.
	Hide the previous colors pallet.


                                                          *ccc-action-goto-next*
goto_next ~
mapping.goto_next()
Default mapping: w
	Go to next (right) color.


                                                          *ccc-action-goto-prev*
goto_prev ~
mapping.goto_prev()
Default mapping: b
	Go to previous (left) color.


                                                          *ccc-action-goto-tail*
goto_tail ~
mapping.goto_tail()
Default mapping: W
	Go to the last color.


                                                          *ccc-action-goto-head*
goto_head ~
mapping.goto_head()
Default mapping: B
	Go to the first color.


                                      *ccc-action-increase* *ccc-action-increase1*
                                    *ccc-action-increase5* *ccc-action-increase10*
increase ~
mapping.increase1()
mapping.increase5()
mapping.increase10()
mapping.delta(intger)
Default mapping: l / d / , (1 / 5 / 10)
	Increase the value times delta of the slider.
	The delta is defined each color system, e.g. RGB is 1.


                                      *ccc-action-decrease* *ccc-action-decrease1*
                                    *ccc-action-decrease5* *ccc-action-decrease10*
decrease ~
mapping.decrease1()
mapping.decrease5()
mapping.decrease10()
mapping.delta(intger)
Default mapping: h / s / m (1 / 5 / 10)
	Decrease the value times delta of the slider.
	The delta is defined each color system, e.g. RGB is 1.


                                                *ccc-action-set* *ccc-action-set0*
	                                    *ccc-action-set50* *ccc-action-set100*
set ~
mapping.set0()
mapping.set50()
mapping.set100()
ccc.set_percent(integer)
Default mapping: H / M / L (0 / 50 / 100), 1 - 9 (10% - 90%)
	Set the value of the slider as a percentage.



vim:tw=78:ts=8:noet:ft=help:norl:
